class TreeNode(object):
    def __init__(self,data):
        self.data = data
        self.left = None
        self.right = None        
class SplayTree(object):
    def __init__(self):
        self.root = None
        self.header=TreeNode(None)
    def splay(self,key):
        l = r = self.header
        t = self.root
        self.header.left = self.header.right = None
        while True:
            if key < t.data:
                if t.left == None:
                    break
                if key < t.left.data:
                    y = t.left
                    t.left = y.right
                    y.right = t
                    t = y
                    if t.left == None:
                        break
                r.left = t
                r = t
                t = t.left
            elif key > t.data:
                if t.right == None:
                    break
                if key > t.right.data:
                    y = t.right
                    t.right = y.left
                    y.left = t
                    t = y
                    if t.right == None:
                        break
                l.right = t
                l = t
                t = t.right
            else:
                break
    def insert(self,key):
        if self.root is None:
            self.root=TreeNode(key)
            return
        self.splay(key)
        if self.root.data == key:
            return
        n=TreeNode(key)
        if key < self.root.data:
            n.left = self.root.left
            n.right == self.root
            self.root.left = None
        else:
            n.right = self.root.right
            n.left = self.root
            self.root.right = None
        self.root=n

    def findMin(self):
        if self.root == None:
            return None
        x = self.root
        while x.left != None:
            x = x.left
        self.splay(x.data)
        return x.data
    def findMax(self):
        if self.root == None:
            return None
        x = self.root
        while x.right != None:
            x = x.left
        self.splay(x.data)
        return x.data
    def find(self,key):
        if self.root == None:
            return None
        self.splay(key)
        if self.root.data != key:
            return None
        return self.root.data
    def delete(self,key):
        self.splay(key)
        if key != self.root.data:
            return None
        if self.root.left==None:
                self.root = self.root.right
        else:
            x = self.root.right
            self.root = self.root.left
            self.splay(key)
            self.root.right = x
